# Build images and other supporting data.  Takes ~10 minutes to build and
# costs ~1G of disk space.
#
# Requires gcc, g++, perl, netpbm, ImageMagick, and Inkscape.
# gcc/g++ also needs libpng, and perl needs libxml.
#
# See svg_to_png.sh for more details on Inkscape.

targets = \
	arm-table-138-138.png \
	finger-table-70-70.png \
	wrist.png \
	cursor1.png \
	cursor2.png \
	cursor3.png \
	cursor4.png \
	cursor5.png \
	cursor6.png \
	cursor7.png \
	help_bg1.png \
	help_bg2.png \
	help_dpad.png \
	help_crank-table-32-32.png \
	debris-table-62-55.png \
	world-table-32-32.png \
	ufo-table-121-37.png \
	card0.png \
	card1.png \
	card2.png \
	card3.png \
	icon0.png \
	icon1.png \
	icon2.png \
	icon3.png \
	launch_image.png \
	loading0.png \
	loading1.png \
	loading2.png \
	loading3.png \
	data.lua

debug_targets = \
	debug_frame0.png \
	debug_frame1.png \
	debug_frame2.png \
	debug_frame3.png \
	debug_gray_frame0.png \
	debug_gray_frame1.png \
	debug_gray_frame2.png \
	debug_gray_frame3.png \
	debug_frame0.svg \
	debug_frame1.svg \
	debug_frame2.svg \
	debug_frame3.svg \
	debug_mount_map.png \
	debug_collectible_tiles.png \
	debug_breakable_tiles.png \
	debug_throwable_tiles.png \
	debug_paintable_tiles.png \
	debug_leaves.svg

# Allow a different input to be selected via command line arguments.
world_master ?= world_master.svg

# Common compiler flags for C/C++ tools.
#
# "-march=native -O3" produces the fastest executables, although these flags
# are here mostly for readability.  For any particular executable, most of
# the time will be spent inside the pre-compiled libpng, and the overall
# build time will be dominated by Inkscape.
cflags = -march=native -O3 -Wall -Wextra -pedantic

# Launcher image region.
screen_size=400x240
title_x0=952
title_y0=848
title_x1=1352
title_y1=1088
title_region=$(screen_size)+$(title_x0)+$(title_y0)


# ......................................................................
# {{{ Primary build artefacts.

all: $(targets)

arm-table-138-138.png: t_arm_table_160_160.png crop_table.exe optimize_png.pl
	./crop_table.exe 160 160 138 138 7 8 < $< | perl optimize_png.pl > $@

finger-table-70-70.png: t_sprites_rotated.png crop_table.exe optimize_png.pl
	convert $< +repage -crop 7200x80+0+320 png:- | ./crop_table.exe 80 80 70 70 7 10 | perl optimize_png.pl > $@

wrist.png: t_sprites_rotated.png optimize_png.pl
	convert $< +repage -crop 17x17+23+440 png:- | perl optimize_png.pl > $@

cursor1.png: t_sprites_rotated.png optimize_png.pl
	convert $< +repage -crop 40x8+76+444 png:- | perl optimize_png.pl > $@

cursor2.png: t_sprites_rotated.png optimize_png.pl
	convert $< +repage -crop 8x40+156+428 png:- | perl optimize_png.pl > $@

cursor3.png: t_sprites_rotated.png optimize_png.pl
	convert $< +repage -crop 30x30+209+433 png:- | perl optimize_png.pl > $@

cursor4.png: t_sprites_rotated.png optimize_png.pl
	convert $< +repage -crop 30x30+273+433 png:- | perl optimize_png.pl > $@

cursor5.png: t_sprites_rotated.png optimize_png.pl
	convert $< +repage -crop 40x40+332+428 png:- | perl optimize_png.pl > $@

cursor6.png: t_sprites_rotated.png optimize_png.pl
	convert $< +repage -crop 40x40+396+428 png:- | perl optimize_png.pl > $@

cursor7.png: t_sprites_rotated.png optimize_png.pl
	convert $< +repage -crop 91x40+962+410 png:- | perl optimize_png.pl > $@

help_bg1.png: t_sprites_rotated.png optimize_png.pl
	convert $< +repage -crop 32x32+448+416 png:- | perl optimize_png.pl > $@

help_bg2.png: t_sprites_rotated.png optimize_png.pl
	convert $< +repage -crop 64x32+512+416 png:- | perl optimize_png.pl > $@

help_dpad.png: t_sprites_rotated.png optimize_png.pl
	convert $< +repage -crop 32x32+608+416 png:- | perl optimize_png.pl > $@

help_crank-table-32-32.png: t_sprites_rotated.png optimize_png.pl
	convert $< +repage -crop 256x32+672+416 png:- | perl optimize_png.pl > $@

debris-table-62-55.png: t_debris_exploded.png crop_table.exe optimize_png.pl
	./crop_table.exe 96 96 62 55 13 21 < $< | perl optimize_png.pl > $@

ufo-table-121-37.png: t_ufo.png crop_table.exe optimize_png.pl
	convert $< +repage -crop 800x52+0+52 png:- | ./crop_table.exe 160 52 121 37 20 7 | perl optimize_png.pl > $@

# We don't optimize world-table-32-32.png because it's large, and it's in
# the critical path for builds.  Not optimizing here saves us ~50 seconds
# per build.
#
# The final output generated by `pdc` is actually the same since it rewrites
# the images anyways.  The reason why we run optimize_png.pl at all is to
# reduce the source directory footprint a bit.
world-table-32-32.png: t_world_tiles.png t_world_data.lua
	cp $< $@

data.lua: t_world_data.lua t_wrist_offsets.lua t_hint_table.lua
	cat $^ > $@

# Launcher images.
launch_image.png: t_title.png optimize_png.pl
	convert -size $(screen_size) 'xc:#ffffff' -colorspace Gray -depth 8 $< -composite png:- | perl optimize_png.pl > $@

# Loading image backgrounds are composited from the grayscale IBG/BG layer
# images instead of the pre-dithered IBG/BG images, because the latter have
# hidden tiles removed.
#
# Also, the title text is already dithered before being composited.  We could
# have used the grayscale title here and dither just once, but I happened to
# like the texture formed by compositing two dither patterns.
loading0.png: t_gray_ibg0.png t_gray_bg0.png t_title.png dither.exe optimize_png.pl
	convert -size $(screen_size) 'xc:#ffffff' -colorspace Gray -depth 8 "(" t_gray_ibg0.png +repage -crop $(title_region) ")" -composite "(" t_gray_bg0.png +repage -crop $(title_region) ")" -composite t_title.png -composite png:- | ./dither.exe - - | perl optimize_png.pl > $@

loading1.png: t_gray_ibg1.png t_gray_bg1.png t_title.png dither.exe optimize_png.pl
	convert -size $(screen_size) 'xc:#ffffff' -colorspace Gray -depth 8 "(" t_gray_ibg1.png +repage -crop $(title_region) ")" -composite "(" t_gray_bg1.png +repage -crop $(title_region) ")" -composite t_title.png -composite png:- | ./dither.exe - - | perl optimize_png.pl > $@

loading2.png: t_gray_ibg2.png t_gray_bg2.png t_title.png dither.exe optimize_png.pl
	convert -size $(screen_size) 'xc:#ffffff' -colorspace Gray -depth 8 "(" t_gray_ibg2.png +repage -crop $(title_region) ")" -composite "(" t_gray_bg2.png +repage -crop $(title_region) ")" -composite t_title.png -composite png:- | ./dither.exe - - | perl optimize_png.pl > $@

loading3.png: t_gray_ibg3.png t_gray_bg3.png t_title.png dither.exe optimize_png.pl
	convert -size $(screen_size) 'xc:#ffffff' -colorspace Gray -depth 8 "(" t_gray_ibg3.png +repage -crop $(title_region) ")" -composite "(" t_gray_bg3.png +repage -crop $(title_region) ")" -composite t_title.png -composite png:- | ./dither.exe - - | perl optimize_png.pl > $@

card0.png: loading0.png optimize_png.pl
	convert $< +repage -crop 350x155+25+43 png:- | perl optimize_png.pl > $@

card1.png: loading1.png optimize_png.pl
	convert $< +repage -crop 350x155+25+43 png:- | perl optimize_png.pl > $@

card2.png: loading2.png optimize_png.pl
	convert $< +repage -crop 350x155+25+43 png:- | perl optimize_png.pl > $@

card3.png: loading3.png optimize_png.pl
	convert $< +repage -crop 350x155+25+43 png:- | perl optimize_png.pl > $@

icon0.png: fg0.png optimize_png.pl
	convert $< +repage -crop 32x32+1856+1088 png:- | perl optimize_png.pl > $@

icon1.png: fg1.png optimize_png.pl
	convert $< +repage -crop 32x32+1856+1088 png:- | perl optimize_png.pl > $@

icon2.png: fg2.png optimize_png.pl
	convert $< +repage -crop 32x32+1856+1088 png:- | perl optimize_png.pl > $@

icon3.png: fg3.png optimize_png.pl
	convert $< +repage -crop 32x32+1856+1088 png:- | perl optimize_png.pl > $@

# }}}

# ......................................................................
# {{{ Intermediate files.

# These are written to the current directory like everything else, but
# they mostly follow the naming convention of having a "t_" prefix, so
# it's easy to tell which files are transient.
#
# The only exceptions to the "t_" prefix are the input files consumed
# by generate_world_tiles.exe:
#
#    {ibg,bg,fg}{0,1,2,3}.png
#    metadata.png
#
# These are special because output table names in t_world_data.lua are
# generated from input file names.

# Title text.
t_title.png: t_gray_title.png dither.exe
	./dither.exe $< $@

t_gray_title.png: t_title.svg
	./svg_to_png.sh $< $@ $(title_x0) $(title_y0) $(title_x1) $(title_y1)

t_title.svg: $(world_master) select_layers.pl remove_unused_defs.pl
	perl select_layers.pl 'title' t_gray_title.png $< | perl remove_unused_defs.pl > $@

# Note that generate_world_tiles.exe has two outputs: t_world_data.lua and
# t_world_tiles.png.  "make -j" doesn't seem to handle the dependencies
# here very well, such that we might need to run "make" twice to guarantee
# that all targets are refreshed (or "make clean; make").  The one trick
# that seem to work is to list both outputs as dependencies for any target
# that depend on just the implicit output (t_world_tiles.png).
t_world_data.lua: \
	ibg0.png ibg1.png ibg2.png ibg3.png \
	bg0.png bg1.png bg2.png bg3.png \
	fg0.png fg1.png fg2.png fg3.png \
	metadata.png generate_world_tiles.exe
	./generate_world_tiles.exe t_world_data.lua t_world_tiles.png ibg0.png ibg1.png ibg2.png ibg3.png bg0.png bg1.png bg2.png bg3.png fg0.png fg1.png fg2.png fg3.png metadata.png

t_world_tiles.png: t_world_data.lua

t_wrist_offsets.lua: t_arm_table_160_160.png generate_wrist_offsets.exe
	./generate_wrist_offsets.exe $< > $@

t_hint_table.lua: generate_hint_table.pl
	perl $< > $@

# Base sprite images.  These are purely black and white images that are
# not dithered, unlike the world tiles which are grayscale and dithered to
# black and white.
t_sprites_rotated.png: t_sprites_rotated.svg svg_to_png.sh
	./svg_to_png.sh $< $@

t_sprites_rotated.svg: sprites_master.svg select_layers.pl remove_unused_defs.pl replicate_and_rotate.pl
	perl select_layers.pl 'ui parts|arm parts' t_sprites_rotated.png $< | perl remove_unused_defs.pl | perl replicate_and_rotate.pl - > $@

t_arm_table_160_160.png: t_sprites_rotated.png
	convert $< +repage -crop 14400x320+0+0 $@

# Background and foreground layers.
#
# World consists of three layers, each with a 4-frame animation loop:
# 1. IBG = immutable background (t_ibg{0,1,2,3}.svg).
# 2. BG = mutable background (t_bg{0,1,2,3}.svg).
# 3. FG = mutable foreground (t_fg{0,1,2,3}.svg).
#
# Initially we have just one set of background tiles, but that resulted in
# two limitations: all the item backgrounds must be blank, and animated
# leaves around trees costs significantly more tiles because we need to
# account for all the edge*background variations.  So now we have two
# background layers.
ibg0.png: t_gray_ibg0_cleaned.png dither.exe
	./dither.exe $< $@

ibg1.png: t_gray_ibg1_cleaned.png dither.exe
	./dither.exe $< $@

ibg2.png: t_gray_ibg2_cleaned.png dither.exe
	./dither.exe $< $@

ibg3.png: t_gray_ibg3_cleaned.png dither.exe
	./dither.exe $< $@

bg0.png: t_gray_bg0_cleaned.png dither.exe
	./dither.exe $< $@

bg1.png: t_gray_bg1_cleaned.png dither.exe
	./dither.exe $< $@

bg2.png: t_gray_bg2_cleaned.png dither.exe
	./dither.exe $< $@

bg3.png: t_gray_bg3_cleaned.png dither.exe
	./dither.exe $< $@

fg0.png: t_gray_fg0.png dither.exe
	./dither.exe $< $@

fg1.png: t_gray_fg1.png dither.exe
	./dither.exe $< $@

fg2.png: t_gray_fg2.png dither.exe
	./dither.exe $< $@

fg3.png: t_gray_fg3.png dither.exe
	./dither.exe $< $@

# Optimize for hidden tiles:
# - Remove tiles in IBG and BG layers that would be completely hidden by tiles
#   in the FG layer.  This removes tile variations that would have been
#   inivisible anyways.  Also, it's a bit more efficient to store empty tiles
#   due to the run-length encoding scheme we use.
#
# - Move any tiles in BG layer that completely obscures IBG layer to IBG layer.
#   The end result is visually and functionally the same since BG layer is
#   drawn on top of IBG layer, but it's more memeory efficient to keep tiles
#   on the IBG layer.
#
#   Note that transfer_hidden_tiles.c that is used in this step has two
#   outputs.  To workaround make quirks, t_gray_{bg,ibg}{0,1,2,3}_cleaned.png
#   targets have dependencies on both outputs, even though they only need one.
t_gray_ibg0_cleaned.png: t_gray_ibg0_transferred.png t_gray_bg0_composited.png t_permanent_fg0.png remove_hidden_tiles.exe
	./remove_hidden_tiles.exe t_permanent_fg0.png $< $@

t_gray_ibg1_cleaned.png: t_gray_ibg1_transferred.png t_gray_bg1_composited.png t_permanent_fg1.png remove_hidden_tiles.exe
	./remove_hidden_tiles.exe t_permanent_fg1.png $< $@

t_gray_ibg2_cleaned.png: t_gray_ibg2_transferred.png t_gray_bg2_composited.png t_permanent_fg2.png remove_hidden_tiles.exe
	./remove_hidden_tiles.exe t_permanent_fg2.png $< $@

t_gray_ibg3_cleaned.png: t_gray_ibg3_transferred.png t_gray_bg3_composited.png t_permanent_fg3.png remove_hidden_tiles.exe
	./remove_hidden_tiles.exe t_permanent_fg3.png $< $@

t_gray_bg0_cleaned.png: t_gray_bg0_composited.png t_gray_ibg0_transferred.png t_permanent_fg0.png remove_hidden_tiles.exe
	./remove_hidden_tiles.exe t_permanent_fg0.png $< $@

t_gray_bg1_cleaned.png: t_gray_bg1_composited.png t_gray_ibg1_transferred.png t_permanent_fg1.png remove_hidden_tiles.exe
	./remove_hidden_tiles.exe t_permanent_fg1.png $< $@

t_gray_bg2_cleaned.png: t_gray_bg2_composited.png t_gray_ibg2_transferred.png t_permanent_fg2.png remove_hidden_tiles.exe
	./remove_hidden_tiles.exe t_permanent_fg2.png $< $@

t_gray_bg3_cleaned.png: t_gray_bg3_composited.png t_gray_ibg3_transferred.png t_permanent_fg3.png remove_hidden_tiles.exe
	./remove_hidden_tiles.exe t_permanent_fg3.png $< $@

t_gray_bg0_composited.png: t_gray_bg0_transferred.png t_mutable_bg0.png t_gray_ibg0_transferred.png
	magick $< t_mutable_bg0.png -composite $@

t_gray_bg1_composited.png: t_gray_bg1_transferred.png t_mutable_bg1.png t_gray_ibg1_transferred.png
	magick $< t_mutable_bg1.png -composite $@

t_gray_bg2_composited.png: t_gray_bg2_transferred.png t_mutable_bg2.png t_gray_ibg2_transferred.png
	magick $< t_mutable_bg2.png -composite $@

t_gray_bg3_composited.png: t_gray_bg3_transferred.png t_mutable_bg3.png t_gray_ibg3_transferred.png
	magick $< t_mutable_bg3.png -composite $@

t_gray_bg0_transferred.png: t_gray_ibg0_transferred.png

t_gray_ibg0_transferred.png: t_permanent_bg0.png t_gray_ibg0.png transfer_hidden_tiles.exe
	./transfer_hidden_tiles.exe t_permanent_bg0.png t_gray_ibg0.png t_gray_bg0_transferred.png $@

t_gray_bg1_transferred.png: t_gray_ibg1_transferred.png

t_gray_ibg1_transferred.png: t_permanent_bg1.png t_gray_ibg1.png transfer_hidden_tiles.exe
	./transfer_hidden_tiles.exe t_permanent_bg1.png t_gray_ibg1.png t_gray_bg1_transferred.png $@

t_gray_bg2_transferred.png: t_gray_ibg2_transferred.png

t_gray_ibg2_transferred.png: t_permanent_bg2.png t_gray_ibg2.png transfer_hidden_tiles.exe
	./transfer_hidden_tiles.exe t_permanent_bg2.png t_gray_ibg2.png t_gray_bg2_transferred.png $@

t_gray_bg3_transferred.png: t_gray_ibg3_transferred.png

t_gray_ibg3_transferred.png: t_permanent_bg3.png t_gray_ibg3.png transfer_hidden_tiles.exe
	./transfer_hidden_tiles.exe t_permanent_bg3.png t_gray_ibg3.png t_gray_bg3_transferred.png $@

t_mutable_bg0.png: t_gray_bg0.png metadata.png keep_mutable_bg.exe
	./keep_mutable_bg.exe metadata.png $< $@

t_mutable_bg1.png: t_gray_bg1.png metadata.png keep_mutable_bg.exe
	./keep_mutable_bg.exe metadata.png $< $@

t_mutable_bg2.png: t_gray_bg2.png metadata.png keep_mutable_bg.exe
	./keep_mutable_bg.exe metadata.png $< $@

t_mutable_bg3.png: t_gray_bg3.png metadata.png keep_mutable_bg.exe
	./keep_mutable_bg.exe metadata.png $< $@

t_permanent_bg0.png: t_gray_bg0.png metadata.png remove_mutable_bg.exe
	./remove_mutable_bg.exe metadata.png $< $@

t_permanent_bg1.png: t_gray_bg1.png metadata.png remove_mutable_bg.exe
	./remove_mutable_bg.exe metadata.png $< $@

t_permanent_bg2.png: t_gray_bg2.png metadata.png remove_mutable_bg.exe
	./remove_mutable_bg.exe metadata.png $< $@

t_permanent_bg3.png: t_gray_bg3.png metadata.png remove_mutable_bg.exe
	./remove_mutable_bg.exe metadata.png $< $@

t_permanent_fg0.png: t_gray_fg0.png metadata.png remove_mutable_fg.exe
	./remove_mutable_fg.exe metadata.png $< $@

t_permanent_fg1.png: t_gray_fg1.png metadata.png remove_mutable_fg.exe
	./remove_mutable_fg.exe metadata.png $< $@

t_permanent_fg2.png: t_gray_fg2.png metadata.png remove_mutable_fg.exe
	./remove_mutable_fg.exe metadata.png $< $@

t_permanent_fg3.png: t_gray_fg3.png metadata.png remove_mutable_fg.exe
	./remove_mutable_fg.exe metadata.png $< $@

# PNGs for graphical layers, rasterized from SVGs.
#
# Note that these images are converted to *color* PNGs, and not grayscale,
# despite their names.  This is fine since dither.exe will convert them to
# grayscale via libpng.
#
# The reason why we do this is because Inkscape can't export whites properly
# when we ask for GrayAlpha_8:
# https://gitlab.com/inkscape/inkscape/-/issues/4693
#
# This is bad because 254 will end up getting dithered incorrectly.
#
# The bug has since been fixed, but we have not bothered to have a specialized
# script to export grayscale images, since it's more convenient to have a
# single svg_to_png.sh.
t_gray_ibg0.png: t_ibg0.svg svg_to_png.sh
	./svg_to_png.sh $< $@

t_gray_ibg1.png: t_ibg1.svg svg_to_png.sh
	./svg_to_png.sh $< $@

t_gray_ibg2.png: t_ibg2.svg svg_to_png.sh
	./svg_to_png.sh $< $@

t_gray_ibg3.png: t_ibg3.svg svg_to_png.sh
	./svg_to_png.sh $< $@

t_gray_bg0.png: t_bg0.svg svg_to_png.sh
	./svg_to_png.sh $< $@

t_gray_bg1.png: t_bg1.svg svg_to_png.sh
	./svg_to_png.sh $< $@

t_gray_bg2.png: t_bg2.svg svg_to_png.sh
	./svg_to_png.sh $< $@

t_gray_bg3.png: t_bg3.svg svg_to_png.sh
	./svg_to_png.sh $< $@

t_gray_fg0.png: t_fg0.svg svg_to_png.sh
	./svg_to_png.sh $< $@

t_gray_fg1.png: t_fg1.svg svg_to_png.sh
	./svg_to_png.sh $< $@

t_gray_fg2.png: t_fg2.svg svg_to_png.sh
	./svg_to_png.sh $< $@

t_gray_fg3.png: t_fg3.svg svg_to_png.sh
	./svg_to_png.sh $< $@

# Source SVGs for graphical layers.
#
# These are generated by extracting a subset of layers from master SVG and
# adding decorations to them.  The order of operations do not affect the
# final output pixels, but they do affect build time: because these perl
# scripts have to parse the full SVG before inserting new elements, by doing
# the small additions first (stars before leaves), we saved ~100ms of
# parsing time.  It might not seem like much since the full build takes
# minutes, but the difference can be felt when iterating with preview.sh.
#
# To save more time for small area tests, the undecorated intermediate files
# are preserved as separate build targets, so that we can avoid the parsing
# times for adding extra decorations if we know they won't be visible.
#
# Note that the decoration rules are duplicated for each frame -- the ones
# without the "t_debug_" prefix takes only the selected layer as input and
# generates only the decorated layer as output, while the ones with
# "t_debug_" prefix stacks decorations for all layers.  The latter are used
# by debug_frame{0,1,2,3}.svg rules for building combined SVGs.  A cleaner
# way would have been to have a separate script merge the decorated
# t_{ibg,bg,fg}{0,1,2,3}.svg files together, but merging SVGs is nontrivial
# due to the same <defs> being shared across layers, and Inkscape seems to
# have certain expectations with regards to ID naming conventions, so a
# trivial rename of the IDs didn't work.
t_ibg0.svg: t_undecorated_ibg0.svg leaves.svg t_sparse_leaf_regions.pgm t_dense_leaf_regions.pgm add_leaves.pl add_stars.pl add_books.pl
	perl add_stars.pl $< 0 | perl add_leaves.pl leaves.svg - t_dense_leaf_regions.pgm 0.5 0 | perl add_leaves.pl leaves.svg - t_sparse_leaf_regions.pgm 1 0 | perl add_books.pl - > $@

t_ibg1.svg: t_undecorated_ibg1.svg leaves.svg t_sparse_leaf_regions.pgm t_dense_leaf_regions.pgm add_leaves.pl add_stars.pl add_books.pl
	perl add_stars.pl $< 1 | perl add_leaves.pl leaves.svg - t_dense_leaf_regions.pgm 0.5 1 | perl add_leaves.pl leaves.svg - t_sparse_leaf_regions.pgm 1 1 | perl add_books.pl - > $@

t_ibg2.svg: t_undecorated_ibg2.svg leaves.svg t_sparse_leaf_regions.pgm t_dense_leaf_regions.pgm add_leaves.pl add_stars.pl add_books.pl
	perl add_stars.pl $< 2 | perl add_leaves.pl leaves.svg - t_dense_leaf_regions.pgm 0.5 2 | perl add_leaves.pl leaves.svg - t_sparse_leaf_regions.pgm 1 2 | perl add_books.pl - > $@

t_ibg3.svg: t_undecorated_ibg3.svg leaves.svg t_sparse_leaf_regions.pgm t_dense_leaf_regions.pgm add_leaves.pl add_stars.pl add_books.pl
	perl add_stars.pl $< 3 | perl add_leaves.pl leaves.svg - t_dense_leaf_regions.pgm 0.5 3 | perl add_leaves.pl leaves.svg - t_sparse_leaf_regions.pgm 1 3 | perl add_books.pl - > $@

t_debug_ibg0.svg: t_debug_base0.svg leaves.svg t_sparse_leaf_regions.pgm t_dense_leaf_regions.pgm add_leaves.pl add_stars.pl add_books.pl
	perl add_stars.pl $< 0 | perl add_leaves.pl leaves.svg - t_dense_leaf_regions.pgm 0.5 0 | perl add_leaves.pl leaves.svg - t_sparse_leaf_regions.pgm 1 0 | perl add_books.pl - > $@

t_debug_ibg1.svg: t_debug_base1.svg leaves.svg t_sparse_leaf_regions.pgm t_dense_leaf_regions.pgm add_leaves.pl add_stars.pl add_books.pl
	perl add_stars.pl $< 1 | perl add_leaves.pl leaves.svg - t_dense_leaf_regions.pgm 0.5 1 | perl add_leaves.pl leaves.svg - t_sparse_leaf_regions.pgm 1 1 | perl add_books.pl - > $@

t_debug_ibg2.svg: t_debug_base2.svg leaves.svg t_sparse_leaf_regions.pgm t_dense_leaf_regions.pgm add_leaves.pl add_stars.pl add_books.pl
	perl add_stars.pl $< 2 | perl add_leaves.pl leaves.svg - t_dense_leaf_regions.pgm 0.5 2 | perl add_leaves.pl leaves.svg - t_sparse_leaf_regions.pgm 1 2 | perl add_books.pl - > $@

t_debug_ibg3.svg: t_debug_base3.svg leaves.svg t_sparse_leaf_regions.pgm t_dense_leaf_regions.pgm add_leaves.pl add_stars.pl add_books.pl
	perl add_stars.pl $< 3 | perl add_leaves.pl leaves.svg - t_dense_leaf_regions.pgm 0.5 3 | perl add_leaves.pl leaves.svg - t_sparse_leaf_regions.pgm 1 3 | perl add_books.pl - > $@

t_bg0.svg: t_undecorated_bg0.svg add_item_plot.pl t_annotated_tiles.txt
	perl add_item_plot.pl $< t_annotated_tiles.txt 0 > $@

t_bg1.svg: t_undecorated_bg1.svg add_item_plot.pl t_annotated_tiles.txt
	perl add_item_plot.pl $< t_annotated_tiles.txt 1 > $@

t_bg2.svg: t_undecorated_bg2.svg add_item_plot.pl t_annotated_tiles.txt
	perl add_item_plot.pl $< t_annotated_tiles.txt 2 > $@

t_bg3.svg: t_undecorated_bg3.svg add_item_plot.pl t_annotated_tiles.txt
	perl add_item_plot.pl $< t_annotated_tiles.txt 3 > $@

t_debug_bg0.svg: t_debug_ibg0.svg add_item_plot.pl t_annotated_tiles.txt
	perl add_item_plot.pl $< t_annotated_tiles.txt 0 > $@

t_debug_bg1.svg: t_debug_ibg1.svg add_item_plot.pl t_annotated_tiles.txt
	perl add_item_plot.pl $< t_annotated_tiles.txt 1 > $@

t_debug_bg2.svg: t_debug_ibg2.svg add_item_plot.pl t_annotated_tiles.txt
	perl add_item_plot.pl $< t_annotated_tiles.txt 2 > $@

t_debug_bg3.svg: t_debug_ibg3.svg add_item_plot.pl t_annotated_tiles.txt
	perl add_item_plot.pl $< t_annotated_tiles.txt 3 > $@

t_fg0.svg: t_undecorated_fg0.svg add_shifts.pl add_water.pl add_blackhole_debris.pl
	perl add_shifts.pl $< 0 | perl add_water.pl - 0 | perl add_blackhole_debris.pl - 0 > $@

t_fg1.svg: t_undecorated_fg1.svg add_shifts.pl add_water.pl add_blackhole_debris.pl
	perl add_shifts.pl $< 1 | perl add_water.pl - 1 | perl add_blackhole_debris.pl - 1 > $@

t_fg2.svg: t_undecorated_fg2.svg add_shifts.pl add_water.pl add_blackhole_debris.pl
	perl add_shifts.pl $< 2 | perl add_water.pl - 2 | perl add_blackhole_debris.pl - 2 > $@

t_fg3.svg: t_undecorated_fg3.svg add_shifts.pl add_water.pl add_blackhole_debris.pl
	perl add_shifts.pl $< 3 | perl add_water.pl - 3 | perl add_blackhole_debris.pl - 3 > $@

t_debug_fg0.svg: t_debug_bg0.svg add_shifts.pl add_water.pl add_blackhole_debris.pl
	perl add_shifts.pl $< 0 | perl add_water.pl - 0 | perl add_blackhole_debris.pl - 0 > $@

t_debug_fg1.svg: t_debug_bg1.svg add_shifts.pl add_water.pl add_blackhole_debris.pl
	perl add_shifts.pl $< 1 | perl add_water.pl - 1 | perl add_blackhole_debris.pl - 1 > $@

t_debug_fg2.svg: t_debug_bg2.svg add_shifts.pl add_water.pl add_blackhole_debris.pl
	perl add_shifts.pl $< 2 | perl add_water.pl - 2 | perl add_blackhole_debris.pl - 2 > $@

t_debug_fg3.svg: t_debug_bg3.svg add_shifts.pl add_water.pl add_blackhole_debris.pl
	perl add_shifts.pl $< 3 | perl add_water.pl - 3 | perl add_blackhole_debris.pl - 3 > $@

t_undecorated_ibg0.svg: $(world_master) select_layers.pl remove_unused_defs.pl
	perl select_layers.pl '^IBG (common|frame0)' t_gray_ibg0.png $< | perl remove_unused_defs.pl > $@

t_undecorated_ibg1.svg: $(world_master) select_layers.pl remove_unused_defs.pl
	perl select_layers.pl '^IBG (common|frame1)' t_gray_ibg1.png $< | perl remove_unused_defs.pl > $@

t_undecorated_ibg2.svg: $(world_master) select_layers.pl remove_unused_defs.pl
	perl select_layers.pl '^IBG (common|frame2)' t_gray_ibg2.png $< | perl remove_unused_defs.pl > $@

t_undecorated_ibg3.svg: $(world_master) select_layers.pl remove_unused_defs.pl
	perl select_layers.pl '^IBG (common|frame3)' t_gray_ibg3.png $< | perl remove_unused_defs.pl > $@

t_undecorated_bg0.svg: $(world_master) select_layers.pl remove_unused_defs.pl
	perl select_layers.pl '^BG (common|frame0)' t_gray_bg0.png $< | perl remove_unused_defs.pl > $@

t_undecorated_bg1.svg: $(world_master) select_layers.pl remove_unused_defs.pl
	perl select_layers.pl '^BG (common|frame1)' t_gray_bg1.png $< | perl remove_unused_defs.pl > $@

t_undecorated_bg2.svg: $(world_master) select_layers.pl remove_unused_defs.pl
	perl select_layers.pl '^BG (common|frame2)' t_gray_bg2.png $< | perl remove_unused_defs.pl > $@

t_undecorated_bg3.svg: $(world_master) select_layers.pl remove_unused_defs.pl
	perl select_layers.pl '^BG (common|frame3)' t_gray_bg3.png $< | perl remove_unused_defs.pl > $@

t_undecorated_fg0.svg: $(world_master) select_layers.pl remove_unused_defs.pl
	perl select_layers.pl '^FG (common|frame0)' t_gray_fg0.png $< | perl remove_unused_defs.pl > $@

t_undecorated_fg1.svg: $(world_master) select_layers.pl remove_unused_defs.pl
	perl select_layers.pl '^FG (common|frame1)' t_gray_fg1.png $< | perl remove_unused_defs.pl > $@

t_undecorated_fg2.svg: $(world_master) select_layers.pl remove_unused_defs.pl
	perl select_layers.pl '^FG (common|frame2)' t_gray_fg2.png $< | perl remove_unused_defs.pl > $@

t_undecorated_fg3.svg: $(world_master) select_layers.pl remove_unused_defs.pl
	perl select_layers.pl '^FG (common|frame3)' t_gray_fg3.png $< | perl remove_unused_defs.pl > $@

t_sparse_leaf_regions.pgm: t_sparse_leaf_regions.png
	convert -size 9600x6400 'xc:#000000' $< -composite -colorspace Gray -depth 8 -color-threshold 'gray(1%)-gray(100%)' $@

t_sparse_leaf_regions.png: t_sparse_leaf_regions.svg svg_to_png.sh
	./svg_to_png.sh $< $@

t_sparse_leaf_regions.svg: $(world_master) select_layers.pl remove_unused_defs.pl
	perl select_layers.pl 'sparse leaf regions' t_sparse_leaf_regions.png $< | perl remove_unused_defs.pl > $@

t_dense_leaf_regions.pgm: t_dense_leaf_regions.png
	convert -size 9600x6400 'xc:#000000' $< -composite -colorspace Gray -depth 8 -color-threshold 'gray(1%)-gray(100%)' $@

t_dense_leaf_regions.png: t_dense_leaf_regions.svg svg_to_png.sh
	./svg_to_png.sh $< $@

t_dense_leaf_regions.svg: $(world_master) select_layers.pl remove_unused_defs.pl
	perl select_layers.pl 'dense leaf regions' t_dense_leaf_regions.png $< | perl remove_unused_defs.pl > $@

# Metadata layer.
metadata.png: t_metadata.svg svg_to_png.sh
	./svg_to_png.sh $< $@

t_metadata.svg: $(world_master) select_layers.pl remove_unused_defs.pl
	perl select_layers.pl '^Metadata' metadata.png $< | perl remove_unused_defs.pl > $@

t_metadata_collision.png: t_metadata_collision.svg
	./svg_to_png.sh $< $@

t_metadata_collision.svg: $(world_master) select_layers.pl remove_unused_defs.pl
	perl select_layers.pl '^Metadata - collision' t_metadata_collision.png $< | perl remove_unused_defs.pl > $@

# List of annotated tiles.
t_annotated_tiles.txt: metadata.png list_annotated_tiles.exe
	./list_annotated_tiles.exe $< > $@

# Debris.
t_debris_exploded.png: t_debris_exploded.svg svg_to_png.sh
	./svg_to_png.sh $< $@

t_debris_exploded.svg: debris_master.svg select_layers.pl remove_unused_defs.pl explode_debris.pl
	perl select_layers.pl '^debris.*' t_debris_exploded.png $< | perl remove_unused_defs.pl | perl explode_debris.pl > $@

# UFO.
t_ufo.png: t_gray_ufo.png dither.exe
	./dither.exe $< $@

t_gray_ufo.png: t_ufo.svg svg_to_png.sh
	./svg_to_png.sh $< $@

t_ufo.svg: ufo_master.svg select_layers.pl remove_unused_defs.pl
	perl select_layers.pl 'ufo' t_gray_ufo.png $< | perl remove_unused_defs.pl > $@

# }}}

# ......................................................................
# {{{ Tools.

dither.exe: dither.c
	gcc $(cflags) $< -lpng -o $@

generate_world_tiles.exe: generate_world_tiles.cc
	g++ $(cflags) $< -lpng -o $@

generate_wrist_offsets.exe: generate_wrist_offsets.c
	gcc $(cflags) $< -lpng -lm -o $@

keep_mutable_bg.exe: remove_mutable_bg.c
	gcc $(cflags) -DINVERT_TILE_SELECTION $< -lpng -o $@

remove_mutable_bg.exe: remove_mutable_bg.c
	gcc $(cflags) $< -lpng -o $@

remove_mutable_fg.exe: remove_mutable_fg.c
	gcc $(cflags) $< -lpng -o $@

remove_hidden_tiles.exe: remove_hidden_tiles.c
	gcc $(cflags) $< -lpng -o $@

transfer_hidden_tiles.exe: transfer_hidden_tiles.c
	gcc $(cflags) $< -lpng -o $@

classify_tiles.exe: classify_tiles.cc
	g++ $(cflags) $< -lpng -o $@

show_empty_tiles.exe: show_empty_tiles.c
	gcc $(cflags) $< -lpng -o $@

show_mountable_tiles.exe: show_mountable_tiles.c
	gcc $(cflags) $< -lpng -o $@

list_annotated_tiles.exe: list_annotated_tiles.c
	gcc $(cflags) $< -lpng -o $@

crop_table.exe: crop_table.c
	gcc $(cflags) $< -lpng -o $@

shrink_tiles.exe: shrink_tiles.c
	gcc $(cflags) $< -lpng -o $@

collect_tile_layers.exe: collect_tile_layers.o t_font.o
	gcc $(cflags) $^ -lpng -o $@

collect_tile_layers.o: collect_tile_layers.c
	gcc $(cflags) -c $< -o $@

t_font.o: t_font.c
	gcc $(cflags) -c $< -o $@

t_font.c: generate_font.pl
	perl $< > $@

# }}}

# ......................................................................
# {{{ Debug targets.

# WARNING: Many of the debug targets will try to load all bitmaps into
# memory, so building all debug targets at the same time is often a
# bad idea.  Speaking from experience, it's possible to freeze a
# computer with 16GB of RAM with "make -j debug".

debug: $(debug_targets) debug_rare_tiles debug_shrink_tiles

# Rasterized, composited, and dithered frames.
debug_frame0.png: ibg0.png bg0.png fg0.png
	convert -size 9600x6400 'xc:#ffffff' -colorspace Gray -depth 8 ibg0.png -composite bg0.png -composite fg0.png -composite $@

debug_frame1.png: ibg1.png bg1.png fg1.png
	convert -size 9600x6400 'xc:#ffffff' -colorspace Gray -depth 8 ibg1.png -composite bg1.png -composite fg1.png -composite $@

debug_frame2.png: ibg2.png bg2.png fg2.png
	convert -size 9600x6400 'xc:#ffffff' -colorspace Gray -depth 8 ibg2.png -composite bg2.png -composite fg2.png -composite $@

debug_frame3.png: ibg3.png bg3.png fg3.png
	convert -size 9600x6400 'xc:#ffffff' -colorspace Gray -depth 8 ibg3.png -composite bg3.png -composite fg3.png -composite $@

# Rasterized and composited frames.
debug_gray_frame0.png: t_gray_fg0.png t_gray_bg0.png t_gray_ibg0.png
	convert t_gray_ibg0.png t_gray_bg0.png -composite t_gray_fg0.png -composite -fill black -draw "rectangle 9280,0 9536,32" -draw "rectangle 0,6240 512,6400" -draw "rectangle 9472,6368 9600,6400" $@

debug_gray_frame1.png: t_gray_fg1.png t_gray_bg1.png t_gray_ibg1.png
	convert t_gray_ibg1.png t_gray_bg1.png -composite t_gray_fg1.png -composite -fill black -draw "rectangle 9280,0 9536,32" -draw "rectangle 0,6240 512,6400" -draw "rectangle 9472,6368 9600,6400" $@

debug_gray_frame2.png: t_gray_fg2.png t_gray_bg2.png t_gray_ibg2.png
	convert t_gray_ibg2.png t_gray_bg2.png -composite t_gray_fg2.png -composite -fill black -draw "rectangle 9280,0 9536,32" -draw "rectangle 0,6240 512,6400" -draw "rectangle 9472,6368 9600,6400" $@

debug_gray_frame3.png: t_gray_fg3.png t_gray_bg3.png t_gray_ibg3.png
	convert t_gray_ibg3.png t_gray_bg3.png -composite t_gray_fg3.png -composite -fill black -draw "rectangle 9280,0 9536,32" -draw "rectangle 0,6240 512,6400" -draw "rectangle 9472,6368 9600,6400" $@

# Combined SVGs of each frame with all the decorations, plus title logo.
# This is useful for rasterizing particular frames at higher resolutions.
debug_frame0.svg: t_debug_fg0.svg
	cp $< $@

debug_frame1.svg: t_debug_fg1.svg
	cp $< $@

debug_frame2.svg: t_debug_fg2.svg
	cp $< $@

debug_frame3.svg: t_debug_fg3.svg
	cp $< $@

t_debug_base0.svg: $(world_master) select_layers.pl remove_unused_defs.pl
	perl select_layers.pl '^((IBG|BG|FG) (common|frame0)|title)' debug_frame0.png $< | perl remove_unused_defs.pl > $@

t_debug_base1.svg: $(world_master) select_layers.pl remove_unused_defs.pl
	perl select_layers.pl '^((IBG|BG|FG) (common|frame1)|title)' debug_frame1.png $< | perl remove_unused_defs.pl > $@

t_debug_base2.svg: $(world_master) select_layers.pl remove_unused_defs.pl
	perl select_layers.pl '^((IBG|BG|FG) (common|frame2)|title)' debug_frame2.png $< | perl remove_unused_defs.pl > $@

t_debug_base3.svg: $(world_master) select_layers.pl remove_unused_defs.pl
	perl select_layers.pl '^((IBG|BG|FG) (common|frame3)|title)' debug_frame3.png $< | perl remove_unused_defs.pl > $@

# Frames across all layers for actionable tiles.
debug_collectible_tiles.png: collect_tile_layers.exe t_collectible_tiles.txt metadata.png ibg0.png ibg1.png ibg2.png ibg3.png bg0.png bg1.png bg2.png bg3.png fg0.png fg1.png fg2.png fg3.png
	./collect_tile_layers.exe $@ t_collectible_tiles.txt metadata.png ibg0.png ibg1.png ibg2.png ibg3.png bg0.png bg1.png bg2.png bg3.png fg0.png fg1.png fg2.png fg3.png

debug_breakable_tiles.png: collect_tile_layers.exe t_breakable_tiles.txt metadata.png ibg0.png ibg1.png ibg2.png ibg3.png bg0.png bg1.png bg2.png bg3.png fg0.png fg1.png fg2.png fg3.png
	./collect_tile_layers.exe $@ t_breakable_tiles.txt metadata.png ibg0.png ibg1.png ibg2.png ibg3.png bg0.png bg1.png bg2.png bg3.png fg0.png fg1.png fg2.png fg3.png

debug_throwable_tiles.png: collect_tile_layers.exe t_throwable_tiles.txt metadata.png ibg0.png ibg1.png ibg2.png ibg3.png bg0.png bg1.png bg2.png bg3.png fg0.png fg1.png fg2.png fg3.png
	./collect_tile_layers.exe $@ t_throwable_tiles.txt metadata.png ibg0.png ibg1.png ibg2.png ibg3.png bg0.png bg1.png bg2.png bg3.png fg0.png fg1.png fg2.png fg3.png

t_collectible_tiles.txt: t_annotated_tiles.txt
	grep -F collectible $< | sed -e 's/:.*//' > $@

t_breakable_tiles.txt: t_annotated_tiles.txt
	grep "breakable$$" $< | sed -e 's/:.*//' > $@

t_throwable_tiles.txt: t_annotated_tiles.txt
	grep -F throwable $< | sed -e 's/:.*//' > $@

# Map of paintable locations in endgame.
debug_paintable_tiles.png: t_paintable01.ppm t_paintable23.ppm
	pamarith -mean $^ | pnmtopng > $@

t_paintable01.ppm: t_paintable0.ppm t_paintable1.ppm
	pamarith -mean $^ > $@

t_paintable23.ppm: t_paintable2.ppm t_paintable3.ppm
	pamarith -mean $^ > $@

t_paintable0.ppm: t_paintable0.png t_empty_collision.pgm
	pngtopnm $< | pamarith -multiply - t_empty_collision.pgm > $@

t_paintable1.ppm: t_paintable1.png t_empty_collision.pgm
	pngtopnm $< | pamarith -multiply - t_empty_collision.pgm > $@

t_paintable2.ppm: t_paintable2.png t_empty_collision.pgm
	pngtopnm $< | pamarith -multiply - t_empty_collision.pgm > $@

t_paintable3.ppm: t_paintable3.png t_empty_collision.pgm
	pngtopnm $< | pamarith -multiply - t_empty_collision.pgm > $@

t_empty_collision.pgm: t_metadata_collision.png
	pngtopnm -alpha $< | pnminvert > $@

t_paintable0.png: bg0.png show_empty_tiles.exe
	./show_empty_tiles.exe $< $@

t_paintable1.png: bg1.png show_empty_tiles.exe
	./show_empty_tiles.exe $< $@

t_paintable2.png: bg2.png show_empty_tiles.exe
	./show_empty_tiles.exe $< $@

t_paintable3.png: bg3.png show_empty_tiles.exe
	./show_empty_tiles.exe $< $@

# Test leave frames.
debug_leaves.svg: add_leaves.pl leaves.svg t_leaves012.svg t_leaf_test_regions.pgm
	perl $^ 0.5 3 > $@

t_leaves0.svg: add_leaves.pl leaves.svg leaves_test_template.svg t_leaf_test_regions.pgm
	perl $^ 0.5 0 > $@

t_leaves01.svg: add_leaves.pl leaves.svg t_leaves0.svg t_leaf_test_regions.pgm
	perl $^ 0.5 1 > $@

t_leaves012.svg: add_leaves.pl leaves.svg t_leaves01.svg t_leaf_test_regions.pgm
	perl $^ 0.5 2 > $@

t_leaf_test_regions.pgm: t_leaf_test_regions.png
	convert -size 9600x6400 'xc:#000000' -colorspace Gray -depth 8 $< -composite -color-threshold 'gray(1%)-gray(100%)' $@

t_leaf_test_regions.png: t_leaf_test_regions.svg svg_to_png.sh
	./svg_to_png.sh $< $@

t_leaf_test_regions.svg: leaves_test_template.svg select_layers.pl remove_unused_defs.pl
	perl select_layers.pl 'leaf regions' t_leaf_test_regions.png $< | perl remove_unused_defs.pl > $@

# Map of tiles with low reuse counts.
debug_rare_tiles: \
	t_tiles_fg0.png \
	t_tiles_fg1.png \
	t_tiles_fg2.png \
	t_tiles_fg3.png \
	t_tiles_bg0.png \
	t_tiles_bg1.png \
	t_tiles_bg2.png \
	t_tiles_bg3.png \
	t_tiles_ibg0.png \
	t_tiles_ibg1.png \
	t_tiles_ibg2.png \
	t_tiles_ibg3.png

t_tiles_fg0.png: t_tiles_ibg3.png
t_tiles_fg1.png: t_tiles_ibg3.png
t_tiles_fg2.png: t_tiles_ibg3.png
t_tiles_fg3.png: t_tiles_ibg3.png
t_tiles_bg0.png: t_tiles_ibg3.png
t_tiles_bg1.png: t_tiles_ibg3.png
t_tiles_bg2.png: t_tiles_ibg3.png
t_tiles_bg3.png: t_tiles_ibg3.png
t_tiles_ibg0.png: t_tiles_ibg3.png
t_tiles_ibg1.png: t_tiles_ibg3.png
t_tiles_ibg2.png: t_tiles_ibg3.png

t_tiles_ibg3.png: classify_tiles.exe ibg0.png ibg1.png ibg2.png ibg3.png bg0.png bg1.png bg2.png bg3.png fg0.png fg1.png fg2.png fg3.png
	./classify_tiles.exe ibg0.png ibg1.png ibg2.png ibg3.png bg0.png bg1.png bg2.png bg3.png fg0.png fg1.png fg2.png fg3.png

# Map of mountable tiles for testing cursor contrast.
debug_mount_map.png: show_mountable_tiles.exe t_world_data.lua debug_gray_frame0.png
	./show_mountable_tiles.exe t_world_data.lua debug_gray_frame0.png $@

# Find the minimum sizes for tile tables.
debug_shrink_tiles: t_cell_sizes.txt
	@cat $<

t_cell_sizes.txt: shrink_tiles.exe t_sprites_rotated.png t_debris_exploded.png t_ufo.png
	echo -n "arm: " > $@
	convert t_sprites_rotated.png +repage -crop 14400x320+0+0 png:- | ./shrink_tiles.exe 160 160 - >> $@
	echo -n "finger: " >> $@
	convert t_sprites_rotated.png +repage -crop 7200x80+0+320 png:- | ./shrink_tiles.exe 80 80 - >> $@
	echo -n "help_crank: " >> $@
	convert t_sprites_rotated.png +repage -crop 256x32+672+416 png:- | ./shrink_tiles.exe 32 32 - >> $@
	echo -n "debris: " >> $@
	./shrink_tiles.exe 96 96 t_debris_exploded.png >> $@
	echo -n "ufo: " >> $@
	convert t_ufo.png +repage -crop 800x52+0+52 png:- | ./shrink_tiles.exe 160 52 - >> $@

# }}}

# ......................................................................
# {{{ Tests and maintenance commands.

test: \
	test_passed.align_mesh_gradient \
	test_passed.check_ref \
	test_passed.check_aligned_paths \
	test_passed.classify_tiles \
	test_passed.cleanup_styles \
	test_passed.collect_tile_layers \
	test_passed.collision_aligned_to_tiles \
	test_passed.crop_table \
	test_passed.dither \
	test_passed.element_count \
	test_passed.generate_build_graph \
	test_passed.generate_world_tiles \
	test_passed.keep_mutable_bg \
	test_passed.list_annotated_tiles \
	test_passed.no_text \
	test_passed.remove_hidden_tiles \
	test_passed.remove_mutable_bg \
	test_passed.remove_mutable_fg \
	test_passed.remove_unused_defs \
	test_passed.select_layers \
	test_passed.show_empty_tiles \
	test_passed.shrink_tiles \
	test_passed.strip_lua \
	test_passed.transfer_hidden_tiles

test_passed.dither: dither.exe test_dither.sh
	./test_dither.sh $< && touch $@

test_passed.generate_world_tiles: generate_world_tiles.exe test_generate_world_tiles.sh
	./test_generate_world_tiles.sh $< && touch $@

test_passed.remove_unused_defs: remove_unused_defs.pl test_remove_unused_defs.sh
	./test_remove_unused_defs.sh $< && touch $@

test_passed.keep_mutable_bg: keep_mutable_bg.exe test_keep_mutable_bg.sh
	./test_keep_mutable_bg.sh $< && touch $@

test_passed.remove_mutable_bg: remove_mutable_bg.exe test_remove_mutable_bg.sh
	./test_remove_mutable_bg.sh $< && touch $@

test_passed.remove_mutable_fg: remove_mutable_fg.exe test_remove_mutable_fg.sh
	./test_remove_mutable_fg.sh $< && touch $@

test_passed.remove_hidden_tiles: remove_hidden_tiles.exe test_remove_hidden_tiles.sh
	./test_remove_hidden_tiles.sh $< && touch $@

test_passed.transfer_hidden_tiles: transfer_hidden_tiles.exe test_transfer_hidden_tiles.sh
	./test_transfer_hidden_tiles.sh $< && touch $@

test_passed.show_empty_tiles: show_empty_tiles.exe test_show_empty_tiles.sh
	./test_show_empty_tiles.sh $< && touch $@

test_passed.select_layers: select_layers.pl test_select_layers.sh
	./test_select_layers.sh $< && touch $@

test_passed.generate_build_graph: generate_build_graph.pl test_generate_build_graph.sh
	./test_generate_build_graph.sh $< && touch $@

test_passed.strip_lua: strip_lua.pl test_strip_lua.sh
	./test_strip_lua.sh $< && touch $@

test_passed.check_ref: check_ref.pl test_check_ref.sh
	./test_check_ref.sh $< && touch $@

test_passed.classify_tiles: classify_tiles.exe test_classify_tiles.sh
	./test_classify_tiles.sh $< && touch $@

test_passed.collect_tile_layers: collect_tile_layers.exe test_collect_tile_layers.sh
	./test_collect_tile_layers.sh $< && touch $@

test_passed.list_annotated_tiles: list_annotated_tiles.exe test_list_annotated_tiles.sh
	./test_list_annotated_tiles.sh $< && touch $@

test_passed.crop_table: crop_table.exe test_crop_table.sh
	./test_crop_table.sh $< && touch $@

test_passed.shrink_tiles: shrink_tiles.exe test_shrink_tiles.sh
	./test_shrink_tiles.sh $< && touch $@

test_passed.element_count: element_count.pl test_element_count.sh
	./test_element_count.sh $< && touch $@

test_passed.cleanup_styles: cleanup_styles.pl test_cleanup_styles.sh
	./test_cleanup_styles.sh $< && touch $@

test_passed.align_mesh_gradient: align_mesh_gradient.pl test_align_mesh_gradient.sh
	./test_align_mesh_gradient.sh $< && touch $@

test_passed.check_aligned_paths: check_aligned_paths.pl test_check_aligned_paths.sh
	./test_check_aligned_paths.sh $< && touch $@

test_passed.collision_aligned_to_tiles: t_metadata_collision.svg
	perl check_aligned_paths.pl $< && touch $@

test_passed.no_text: world_master.svg select_layers.pl element_count.pl
	! ( perl select_layers.pl '^(Metadata|(IBG|BG|FG) (common|frame\d))' t_text_test.png $< | perl element_count.pl - | grep '^text' ) && touch $@

clean:
	-rm -f $(targets) $(debug_targets) *.exe *.o test_passed.* t_*
	-rm -f {ibg,bg,fg}{0,1,2,3}.png metadata.png

# }}}
